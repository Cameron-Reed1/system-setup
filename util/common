#!/usr/bin/env bash


if [ -n "$TRACE" ]; then
    set -x
fi
set -o pipefail
export SHELLOPTS

if [ -z "$HOME" ]; then
    echo "Fatal error: \$HOME is not set!"
    exit 1
fi

export XDG_CONFIG_HOME="${XDG_CONFIG_HOME:-$HOME/.config}"

export COMPONENT_DIR="${COMPONENT_DIR:-$SETUP_DIR/components}"
export CONFIG_DIR="${CONFIG_DIR:-$SETUP_DIR/config}"
export EXTRAS_DIR="${EXTRAS_DIR:-$SETUP_DIR/extras}"
export PATCH_DIR="${PATCH_DIR:-$SETUP_DIR/patches}"


function exit_with_err() {
    echo "$(caller | awk '{print $NF}'): $*" >&2
    exit 1
}


function valid_component() {
    [ -z "$1" ] && exit_with_err "Empty component name"
    [[ "$1" =~ ' ' ]] && exit_with_err "Invalid component name: '$1' contains a space"
    if [ ! -f "$COMPONENT_DIR/$1" ]; then
        echo "$1 component does not exist"
        return 1
    fi
    return 0
}


function install_aur_pkg() {
    if pacman -Q "$1" > /dev/null; then
        return
    fi

    if [ -d "$HOME/builds/$1" ]; then
        echo "Build directory for $1 already exists. Skipping installation"
        return
    fi
    mkdir -p "$HOME/builds"

    git clone "https://aur.archlinux.org/$1.git" "$HOME/builds/$1"
    ${EDITOR:-vim} "$HOME/builds/$1/PKGBUILD"
    read -r -p "Install $1? [y/N]: "

    if [ "$REPLY" = "y" ] || [ "$REPLY" = "Y" ]; then
        pushd "$HOME/builds/$1" || return 1
        makepkg -ic
        popd || return 2
    fi
}


function copy() {
    local source="$1"
    local dest="$2"

    local USE_SUDO=""
    local dir="$dest"
    while [ "$dir" != '/' ] && [ ! -d "$dir" ]; do
        dir=$(dirname "$dir")
    done
    if [ ! -w "$dir" ]; then
        USE_SUDO="sudo"
    fi

    if [ -f "$source" ]; then
        if [ -e "$dest" ] && [ ! -f "$dest" ]; then
            echo "Refusing to copy $source to $dest. Source is a file, but destination is not"
            return 1
        fi

        if ! diff "$source" "$dest" > /dev/null 2>&1; then
            $USE_SUDO mkdir -p "$(dirname "$dest")"
            $USE_SUDO cp "$source" "$dest"
        fi
    elif [ -d "$source" ]; then
        if [ -e "$dest" ] && [ ! -d "$dest" ]; then
            echo "Refusing to copy $source to $dest. Source is a directory, but destination is not"
            return 1
        fi

        if ! diff -r "$source" "$dest" > /dev/null 2>&1; then
            if [ -d "$dest" ]; then
                $USE_SUDO rm -rf "$dest"/{*,.*} # delete everything inside the directory, but not the directory itself
            fi
            $USE_SUDO mkdir -p "$dest"
            $USE_SUDO cp -r "$source/." "$dest"
        fi
    else
        echo "WARNING: cannot copy $source to $dest because it does not exist"
    fi
}


export -f exit_with_err
export -f valid_component
export -f install_aur_pkg
export -f copy
